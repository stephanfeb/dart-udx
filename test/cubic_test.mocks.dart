// Mocks generated by Mockito 5.4.4 from annotations
// in dart_udx/test/cubic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dart_udx/src/cid.dart' as _i4;
import 'package:dart_udx/src/congestion.dart' as _i2;
import 'package:dart_udx/src/packet.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCongestionController_0 extends _i1.SmartFake
    implements _i2.CongestionController {
  _FakeCongestionController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PacketManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPacketManager extends _i1.Mock implements _i3.PacketManager {
  MockPacketManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CongestionController get congestionController => (super.noSuchMethod(
        Invocation.getter(#congestionController),
        returnValue: _FakeCongestionController_0(
          this,
          Invocation.getter(#congestionController),
        ),
      ) as _i2.CongestionController);

  @override
  set congestionController(_i2.CongestionController? _congestionController) =>
      super.noSuchMethod(
        Invocation.setter(
          #congestionController,
          _congestionController,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get lastSentPacketNumber => (super.noSuchMethod(
        Invocation.getter(#lastSentPacketNumber),
        returnValue: 0,
      ) as int);

  @override
  set lastSentPacketNumber(int? _lastSentPacketNumber) => super.noSuchMethod(
        Invocation.setter(
          #lastSentPacketNumber,
          _lastSentPacketNumber,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onRetransmit(void Function(_i3.UDXPacket)? _onRetransmit) =>
      super.noSuchMethod(
        Invocation.setter(
          #onRetransmit,
          _onRetransmit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onSendProbe(void Function(_i3.UDXPacket)? _onSendProbe) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSendProbe,
          _onSendProbe,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onPacketPermanentlyLost(
          void Function(_i3.UDXPacket)? _onPacketPermanentlyLost) =>
      super.noSuchMethod(
        Invocation.setter(
          #onPacketPermanentlyLost,
          _onPacketPermanentlyLost,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get nextSequence => (super.noSuchMethod(
        Invocation.getter(#nextSequence),
        returnValue: 0,
      ) as int);

  @override
  List<_i3.UDXPacket> get sentPackets => (super.noSuchMethod(
        Invocation.getter(#sentPackets),
        returnValue: <_i3.UDXPacket>[],
      ) as List<_i3.UDXPacket>);

  @override
  int get retransmitTimeout => (super.noSuchMethod(
        Invocation.getter(#retransmitTimeout),
        returnValue: 0,
      ) as int);

  @override
  void sendPacket(_i3.UDXPacket? packet) => super.noSuchMethod(
        Invocation.method(
          #sendPacket,
          [packet],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int> handleAckFrame(_i3.AckFrame? frame) => (super.noSuchMethod(
        Invocation.method(
          #handleAckFrame,
          [frame],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  void handleData(_i3.UDXPacket? packet) => super.noSuchMethod(
        Invocation.method(
          #handleData,
          [packet],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.UDXPacket? getPacket(int? sequence) =>
      (super.noSuchMethod(Invocation.method(
        #getPacket,
        [sequence],
      )) as _i3.UDXPacket?);

  @override
  void sendProbe(
    _i4.ConnectionId? destCid,
    _i4.ConnectionId? srcCid,
    int? destId,
    int? srcId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #sendProbe,
          [
            destCid,
            srcCid,
            destId,
            srcId,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void retransmitPacket(int? sequence) => super.noSuchMethod(
        Invocation.method(
          #retransmitPacket,
          [sequence],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void destroy() => super.noSuchMethod(
        Invocation.method(
          #destroy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<int, _i3.UDXPacket> getSentPacketsTestHook() => (super.noSuchMethod(
        Invocation.method(
          #getSentPacketsTestHook,
          [],
        ),
        returnValue: <int, _i3.UDXPacket>{},
      ) as Map<int, _i3.UDXPacket>);

  @override
  Map<int, _i5.Timer> getRetransmitTimersTestHook() => (super.noSuchMethod(
        Invocation.method(
          #getRetransmitTimersTestHook,
          [],
        ),
        returnValue: <int, _i5.Timer>{},
      ) as Map<int, _i5.Timer>);
}
