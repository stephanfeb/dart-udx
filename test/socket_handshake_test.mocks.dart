// Mocks generated by Mockito 5.4.4 from annotations
// in dart_udx/test/socket_handshake_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i6;

import 'package:dart_udx/src/cid.dart' as _i7;
import 'package:dart_udx/src/socket.dart' as _i3;
import 'package:dart_udx/dart_udx.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRawDatagramSocket_0 extends _i1.SmartFake
    implements _i2.RawDatagramSocket {
  _FakeRawDatagramSocket_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUDPSocket_1 extends _i1.SmartFake implements _i3.UDPSocket {
  _FakeUDPSocket_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UDXMultiplexer].
///
/// See the documentation for Mockito's code generation for more information.
class MockUDXMultiplexer extends _i1.Mock implements _i4.UDXMultiplexer {
  MockUDXMultiplexer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RawDatagramSocket get socket => (super.noSuchMethod(
        Invocation.getter(#socket),
        returnValue: _FakeRawDatagramSocket_0(
          this,
          Invocation.getter(#socket),
        ),
      ) as _i2.RawDatagramSocket);

  @override
  _i5.Stream<_i3.UDPSocket> get connections => (super.noSuchMethod(
        Invocation.getter(#connections),
        returnValue: _i5.Stream<_i3.UDPSocket>.empty(),
      ) as _i5.Stream<_i3.UDPSocket>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void send(
    _i6.Uint8List? data,
    _i2.InternetAddress? address,
    int? port,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #send,
          [
            data,
            address,
            port,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeSocket(_i7.ConnectionId? localCid) => super.noSuchMethod(
        Invocation.method(
          #removeSocket,
          [localCid],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.UDPSocket createSocket(
    _i4.UDX? udx,
    String? host,
    int? port, {
    _i7.ConnectionId? localCid,
    _i7.ConnectionId? remoteCid,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSocket,
          [
            udx,
            host,
            port,
          ],
          {
            #localCid: localCid,
            #remoteCid: remoteCid,
          },
        ),
        returnValue: _FakeUDPSocket_1(
          this,
          Invocation.method(
            #createSocket,
            [
              udx,
              host,
              port,
            ],
            {
              #localCid: localCid,
              #remoteCid: remoteCid,
            },
          ),
        ),
      ) as _i3.UDPSocket);

  @override
  Map<_i7.ConnectionId, _i3.UDPSocket> getSocketsForTest() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSocketsForTest,
          [],
        ),
        returnValue: <_i7.ConnectionId, _i3.UDPSocket>{},
      ) as Map<_i7.ConnectionId, _i3.UDPSocket>);

  @override
  void handleIncomingDatagramForTest(
    _i6.Uint8List? data,
    _i2.InternetAddress? address,
    int? port,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #handleIncomingDatagramForTest,
          [
            data,
            address,
            port,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
